{"version":3,"sources":["Square.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","style","value","Board","i","this","colors","squares","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","Game","state","history","Array","fill","color","xIsNext","lastUpdated","stepnumber","slice","current","setState","concat","step","status","styles","winner","moves","map","move","desc","key","jumpTo","backgroundColor","gameEnded","gameEnd","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e15ae44.chunk.js","sourcesContent":["import React from 'react'\r\nfunction Square(props) {\r\n        return (\r\n            <button className = \"square\" \r\n                    onClick = {props.onClick} style = {props.style}>\r\n                {props.value}\r\n            </button>\r\n        );\r\n}\r\nexport default Square;","import React from 'react'\r\nimport Square from './Square'\r\nclass Board extends React.Component {\r\n    renderSquare(i)\r\n    {\r\n        return (<Square style = {this.props.colors[i]} value = {this.props.squares[i]} onClick = {() => this.props.onClick(i)} />);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className = \"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className = \"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className = \"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react'\r\nimport Board from './Board'\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n                colors: Array(9).fill({color: 'limegreen'})\r\n            }],\r\n            xIsNext: true,\r\n            lastUpdated: 0, \r\n            stepnumber: 0,\r\n        };\r\n    }\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepnumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        const colors = current.colors.slice();\r\n        if(calculateWinner(squares) || squares[i])\r\n        {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        colors[i] = this.state.xIsNext ? {color: 'limegreen'} : {color: 'yellow'}\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                colors: colors,\r\n            }]),\r\n            stepnumber: history.length,\r\n            xIsNext: (!this.state.xIsNext),    \r\n            lastUpdated: i,\r\n                       \r\n        });\r\n    }\r\n    jumpTo(step)\r\n    {\r\n        this.setState({\r\n            stepnumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepnumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\r\n            return(\r\n                <li key={move}>\r\n                    <button className = \"moveButton\" onClick={() => this.jumpTo(move)}> {desc} </button>\r\n                </li>\r\n            );\r\n            \r\n        });\r\n        let status;\r\n        let styles;\r\n        if(winner) {\r\n            status = 'WINNER: ' + winner; \r\n            if(winner === 'X')\r\n            {\r\n                styles = {                                                            \r\n                      color: 'white',\r\n                      backgroundColor: 'limegreen'\r\n                };\r\n            }\r\n            else{\r\n                styles = {                                                            \r\n                    color: 'black',\r\n                    backgroundColor: 'yellow'\r\n                  }\r\n              };   \r\n        } else {\r\n            if(gameEnd(current.squares))\r\n            {\r\n                status = 'DRAW!';\r\n                styles = {                                                            \r\n                    color: 'white',\r\n                    backgroundColor: 'red'\r\n                  }\r\n            }\r\n            else{\r\n                status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n                styles = {                                                            \r\n                    color: 'white',\r\n                    backgroundColor: 'black'\r\n              }\r\n            };\r\n        }\r\n        return (\r\n            <div className = \"game\">\r\n                <div className = \"apptitle\">MP'S TIC-TAC-TOE</div>\r\n                <div className = \"game-board\">\r\n                    <Board\r\n                     squares={current.squares}\r\n                     colors={current.colors}\r\n                     onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className = \"game-info\">\r\n                    <div className = \"status\" style = {styles}>{status}</div>\r\n                    <ul>{moves}</ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for(let i = 0; i < lines.length; i++) {\r\n        const[a, b, c] = lines[i];\r\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction gameEnd(squares) {\r\n    let gameEnded = false;\r\n   for(let i = 0; i < squares.length; i++) {\r\n       if(squares[i] !== null)\r\n       {\r\n           gameEnded = true;\r\n       }\r\n       else{\r\n           gameEnded = false;\r\n           return gameEnded;\r\n       }\r\n   }\r\n   return gameEnded;\r\n}\r\nexport default Game;","import React from 'react';\nimport Game from './Game'\nfunction App() {\n  return (\n      <div className = \"App\">\n        <Game/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}